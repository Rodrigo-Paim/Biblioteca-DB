name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - dev
      - test
      - 'feature/**'
      - 'feat/**'
      - 'bugfix/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - master
      - dev
      - test
      - 'feature/**'
      - 'feat/**'
      - 'bugfix/**'
      - 'hotfix/**'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build with Maven
        run: mvn clean package

      - name: Build Docker image
        run: docker build -t library-app .

      - name: Push Docker image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag library-app:latest $DOCKER_USER/library-app:latest
          docker push $DOCKER_USER/library-app:latest

  Checkstyle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Run Checkstyle
        run: mvn checkstyle:check

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Run tests
        run: mvn test

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ github.sha }}
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build the project
        run: mvn clean package

      - name: Run SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar

      - name: Check SonarCloud Quality Gate
        run: |
          PROJECT_KEY="${{ secrets.SONAR_PROJECT_KEY }}"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"

          if [[ "$GITHUB_REF" == refs/pull/* ]]; then
            PULL_REQUEST_ID=$(jq -r .pull_request.number < "$GITHUB_EVENT_PATH")
            STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&pullRequest=${PULL_REQUEST_ID}")
          else
            STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&branch=${BRANCH_NAME}")
          fi

          STATUS_VALUE=$(echo "$STATUS" | jq -r '.projectStatus.status')

          if [[ -z "$STATUS_VALUE" ]]; then
            echo "Status is null or undefined. Check if the analysis is configured for PRs."
            exit 1
          fi

          if [[ "$STATUS_VALUE" != "OK" ]]; then
            echo "SonarCloud analysis failed! Status: $STATUS_VALUE"
            echo "Conditions failed:"
            echo "$STATUS" | jq -r '.projectStatus.conditions[] | "Metric: \(.metricKey), Status: \(.status), Actual Value: \(.actualValue), Limit: \(.errorThreshold)"'
            exit 1
          else
            echo "SonarCloud analysis success."
          fi
